---
# ECR Repository Management
- name: Get AWS account ID
  amazon.aws.aws_caller_info:
  register: aws_caller_info
  tags: [ecr, setup]

- name: Set AWS account ID fact
  set_fact:
    aws_account_id: "{{ aws_caller_info.account }}"
  tags: [ecr, setup]

- name: Ensure ECR repositories exist
  amazon.aws.ecs_ecr:
    name: "{{ item }}"
    region: "{{ aws_region }}"
    state: present
    lifecycle_policy: |
      {
        "rules": [
          {
            "rulePriority": 1,
            "description": "Keep last 10 images",
            "selection": {
              "tagStatus": "untagged",
              "countType": "imageCountMoreThan",
              "countNumber": 10
            },
            "action": {
              "type": "expire"
            }
          }
        ]
      }
  loop:
    - "{{ ecr_backend_repo }}"
    - "{{ ecr_frontend_repo }}"
  tags: [ecr, repositories]

# Backend Image Build
- name: Create backend build directory
  file:
    path: "{{ app_backend_dir }}"
    state: directory
    mode: '0755'
  tags: [backend, build]

- name: Create backend Dockerfile from template
  template:
    src: Dockerfile.backend.j2
    dest: "{{ app_backend_dir }}/Dockerfile"
    mode: '0644'
    backup: yes
  register: backend_dockerfile
  tags: [backend, build]

- name: Create backend .env file
  template:
    src: backend.env.j2
    dest: "{{ app_backend_dir }}/.env"
    mode: '0600'
    backup: yes
  register: backend_env
  tags: [backend, build]

- name: Login to ECR
  shell: |
    aws ecr get-login-password --region {{ aws_region }} | \
    docker login --username AWS --password-stdin {{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com
  environment:
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  register: ecr_login
  changed_when: "'Login Succeeded' in ecr_login.stdout"
  tags: [ecr, login]

- name: Build backend Docker image
  docker_image:
    name: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_backend_repo }}"
    tag: "{{ backend_image_tag | default('latest') }}"
    build:
      path: "{{ app_backend_dir }}"
      dockerfile: Dockerfile
      pull: yes
      nocache: "{{ docker_build_no_cache | default(false) }}"
    source: build
    state: present
    force_source: "{{ backend_dockerfile.changed or backend_env.changed }}"
  register: backend_image_build
  tags: [backend, build]

- name: Push backend image to ECR
  docker_image:
    name: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_backend_repo }}"
    tag: "{{ backend_image_tag | default('latest') }}"
    push: yes
    source: local
  when: backend_image_build.changed
  tags: [backend, push]

# Wait for backend service (if needed for frontend build)
- name: Wait for backend service LoadBalancer
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: cloudmart-backend-app-service
    namespace: "{{ k8s_namespace | default('default') }}"
    wait: true
    wait_condition:
      type: LoadBalancer
      status: "True"
    wait_timeout: 300
  register: backend_service
  when: wait_for_backend_service | default(true)
  ignore_errors: yes
  tags: [backend, service]

- name: Get backend service endpoint
  set_fact:
    backend_endpoint: "{{ backend_service.resources[0].status.loadBalancer.ingress[0].hostname | default('') }}"
  when: 
    - wait_for_backend_service | default(true)
    - backend_service is defined
    - backend_service.resources is defined
    - backend_service.resources | length > 0
  tags: [backend, service]

# Frontend Image Build
- name: Create frontend build directory
  file:
    path: "{{ app_frontend_dir }}"
    state: directory
    mode: '0755'
  tags: [frontend, build]

- name: Create frontend Dockerfile from template
  template:
    src: Dockerfile.frontend.j2
    dest: "{{ app_frontend_dir }}/Dockerfile"
    mode: '0644'
    backup: yes
  register: frontend_dockerfile
  tags: [frontend, build]

- name: Create frontend .env file
  template:
    src: frontend.env.j2
    dest: "{{ app_frontend_dir }}/.env"
    mode: '0644'
    backup: yes
  vars:
    api_base_url: "{{ backend_endpoint | default('') }}"
  register: frontend_env
  tags: [frontend, build]

- name: Build frontend Docker image
  docker_image:
    name: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_frontend_repo }}"
    tag: "{{ frontend_image_tag | default('latest') }}"
    build:
      path: "{{ app_frontend_dir }}"
      dockerfile: Dockerfile
      pull: yes
      nocache: "{{ docker_build_no_cache | default(false) }}"
    source: build
    state: present
    force_source: "{{ frontend_dockerfile.changed or frontend_env.changed }}"
  register: frontend_image_build
  tags: [frontend, build]

- name: Push frontend image to ECR
  docker_image:
    name: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_frontend_repo }}"
    tag: "{{ frontend_image_tag | default('latest') }}"
    push: yes
    source: local
  when: frontend_image_build.changed
  tags: [frontend, push]

# Cleanup old images (optional)
- name: Remove old local Docker images
  docker_prune:
    images: yes
    images_filters:
      dangling: false
      until: "24h"
  when: cleanup_old_images | default(false)
  tags: [cleanup]
