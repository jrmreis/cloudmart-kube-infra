---
- name: Check if backend ECR repository exists
  shell: aws ecr describe-repositories --repository-names {{ ecr_backend_repo }} --region {{ aws_region }} || echo "NOT_EXISTS"
  register: backend_repo_exists
  changed_when: false
  ignore_errors: yes

- name: Create backend ECR repository if it doesn't exist
  shell: aws ecr create-repository --repository-name {{ ecr_backend_repo }} --region {{ aws_region }}
  when: '"NOT_EXISTS" in backend_repo_exists.stdout'

- name: Check if frontend ECR repository exists
  shell: aws ecr describe-repositories --repository-names {{ ecr_frontend_repo }} --region {{ aws_region }} || echo "NOT_EXISTS"
  register: frontend_repo_exists
  changed_when: false
  ignore_errors: yes

- name: Create frontend ECR repository if it doesn't exist
  shell: aws ecr create-repository --repository-name {{ ecr_frontend_repo }} --region {{ aws_region }}
  when: '"NOT_EXISTS" in frontend_repo_exists.stdout'

- name: Get AWS account ID
  shell: aws sts get-caller-identity --query Account --output text
  register: aws_account_id
  changed_when: false

- name: Create backend Dockerfile from template
  template:
    src: Dockerfile.backend.j2
    dest: "{{ app_backend_dir }}/Dockerfile"
    mode: '0644'

- name: Create backend .env file
  copy:
    dest: "{{ app_backend_dir }}/.env"
    content: |
      PORT=5000
      AWS_REGION={{ aws_region }}
      BEDROCK_AGENT_ID={{ app_bedrock_agent_id }}
      BEDROCK_AGENT_ALIAS_ID={{ app_bedrock_agent_alias_id }}
      OPENAI_API_KEY={{ app_openai_api_key }}
      OPENAI_ASSISTANT_ID={{ app_openai_assistant_id }}
    mode: '0600'

- name: Login to ECR
  shell: aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com
  args:
    executable: /bin/bash

- name: Build and push backend image
  shell: |
    cd {{ app_backend_dir }}
    docker build -t {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_backend_repo }}:latest .
    docker push {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_backend_repo }}:latest
  args:
    executable: /bin/bash

- name: Create frontend Dockerfile from template
  template:
    src: Dockerfile.frontend.j2
    dest: "{{ app_frontend_dir }}/Dockerfile"
    mode: '0644'

- name: Wait for backend service to be available and get its public URL
  shell: kubectl get svc cloudmart-backend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo ""
  register: backend_lb
  until: backend_lb.stdout | length > 0
  retries: 3
  delay: 10
  ignore_errors: yes

- name: Create frontend .env file with backend endpoint
  copy:
    dest: "{{ app_frontend_dir }}/.env"
    content: |
      VITE_API_BASE_URL=http://{{ backend_lb.stdout | default('cloudmart-backend-app-service') }}:5000/api
    mode: '0644'

- name: Build and push frontend image
  shell: |
    cd {{ app_frontend_dir }}
    docker build -t {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_frontend_repo }}:latest .
    docker push {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_frontend_repo }}:latest
  args:
    executable: /bin/bash
