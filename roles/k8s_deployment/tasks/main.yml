---
# Updated tasks for the k8s_deployment role
- name: Install required Python modules for Kubernetes tasks
  pip:
    name:
      - openshift
      - kubernetes
      - "urllib3==1.26.16"
    state: present
  become: yes
  delegate_to: localhost

- name: Get AWS account ID
  shell: aws sts get-caller-identity --query 'Account' --output text
  register: aws_account_id_output

- name: Set AWS account ID fact
  set_fact:
    aws_account_id: "{{ aws_account_id_output.stdout }}"

- name: Create backend Kubernetes deployment file
  template:
    src: cloudmart-backend.yaml.j2
    dest: "{{ backend_dir }}/cloudmart-backend.yaml"
  vars:
    aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-east-1', true) }}"

- name: Apply backend Kubernetes deployment
  shell: |
    kubectl apply -f {{ backend_dir }}/cloudmart-backend.yaml
  register: backend_deployment_result

- name: Display backend deployment result
  debug:
    var: backend_deployment_result.stdout_lines
  when: backend_deployment_result is succeeded

- name: Wait for backend deployment to be available
  shell: |
    kubectl rollout status deployment/cloudmart-backend-app --timeout=300s
  register: backend_status
  retries: 5
  delay: 30
  until: backend_status.rc == 0

- name: Wait for backend service to get external IP/hostname
  shell: |
    kubectl get svc cloudmart-backend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'
  register: backend_external_endpoint
  until: backend_external_endpoint.stdout != ""
  retries: 20
  delay: 30
  failed_when: false

- name: Set backend service URL
  set_fact:
    backend_service_url: "{{ backend_external_endpoint.stdout }}"
  when: backend_external_endpoint.stdout != ""

- name: Fallback to NodePort if LoadBalancer not ready
  block:
    - name: Get node IP for NodePort fallback
      shell: kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}'
      register: node_external_ip
      when: backend_service_url is not defined or backend_service_url == ""

    - name: Get NodePort for backend service
      shell: kubectl get svc cloudmart-backend-app-service -o jsonpath='{.spec.ports[0].nodePort}'
      register: backend_nodeport
      when: backend_service_url is not defined or backend_service_url == ""

    - name: Set NodePort URL as fallback
      set_fact:
        backend_service_url: "{{ node_external_ip.stdout }}:{{ backend_nodeport.stdout }}"
      when: 
        - backend_service_url is not defined or backend_service_url == ""
        - node_external_ip.stdout != ""
        - backend_nodeport.stdout != ""
  when: backend_service_url is not defined or backend_service_url == ""

- name: Debug backend URL
  debug:
    msg: "Backend URL will be: http://{{ backend_service_url }}:5000/api"
  when: backend_service_url is defined

- name: Create frontend environment ConfigMap with external backend URL
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: frontend-env-config
        namespace: default
      data:
        .env: "VITE_API_BASE_URL=http://{{ backend_service_url | default('localhost') }}:5000/api"

- name: Create frontend Kubernetes deployment file
  template:
    src: cloudmart-frontend.yaml.j2
    dest: "{{ frontend_dir }}/cloudmart-frontend.yaml"
  vars:
    frontend_app_name: "cloudmart-frontend-app"
    aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-east-1', true) }}"
    frontend_version: "latest"
    backend_service_name: "cloudmart-backend-app-service"
    backend_service_port: "5000"
    frontend_service_type: "LoadBalancer"
    frontend_image: "{{ aws_account_id }}.dkr.ecr.{{ aws_region | default('us-east-1') }}.amazonaws.com/cloudmart-frontend"
    k8s_namespace: "default"
    backend_service_url: "{{ backend_service_url | default('') }}"

- name: Apply frontend Kubernetes deployment
  shell: |
    kubectl apply -f {{ frontend_dir }}/cloudmart-frontend.yaml
  register: frontend_deployment_result

- name: Display frontend deployment result
  debug:
    var: frontend_deployment_result.stdout_lines
  when: frontend_deployment_result is succeeded

- name: Wait for frontend deployment to be ready
  shell: |
    kubectl rollout status deployment/cloudmart-frontend-app --timeout=300s
  register: frontend_status
  retries: 5
  delay: 30
  until: frontend_status.rc == 0

- name: Get frontend service URL
  shell: |
    kubectl get svc cloudmart-frontend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'
  register: frontend_external_endpoint
  until: frontend_external_endpoint.stdout != ""
  retries: 15
  delay: 30
  failed_when: false

- name: Display access URLs
  debug:
    msg: |
      Frontend URL: http://{{ frontend_external_endpoint.stdout }}:3000
      Backend URL: http://{{ backend_service_url }}:5000/api
  when: 
    - frontend_external_endpoint.stdout != ""
    - backend_service_url is defined
