---
# Simplified k8s_deployment role tasks
- name: Install required Python modules
  pip:
    name:
      - kubernetes
      - "urllib3==1.26.16"
    state: present
  become: yes

- name: Get AWS account ID
  shell: aws sts get-caller-identity --query 'Account' --output text
  register: aws_account_id_output
  changed_when: false

- name: Set facts
  set_fact:
    aws_account_id: "{{ aws_account_id_output.stdout }}"
    aws_region: "{{ aws_region | default('us-east-1') }}"

- name: Create backend deployment file
  template:
    src: cloudmart-backend.yaml.j2
    dest: "{{ backend_dir }}/cloudmart-backend.yaml"

- name: Deploy backend to Kubernetes
  shell: kubectl apply -f {{ backend_dir }}/cloudmart-backend.yaml
  register: backend_deploy

- name: Wait for backend deployment
  shell: kubectl rollout status deployment/cloudmart-backend-app --timeout=300s
  retries: 3
  delay: 10

- name: Wait for backend service (with timeout)
  shell: |
    for i in {1..10}; do
      URL=$(kubectl get svc cloudmart-backend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
      if [ -n "$URL" ]; then
        echo "$URL"
        exit 0
      fi
      echo "Waiting for backend service... attempt $i/10"
      sleep 30
    done
    echo "TIMEOUT"
  register: backend_endpoint
  changed_when: false

- name: Set backend URL
  set_fact:
    backend_url: "{{ backend_endpoint.stdout if backend_endpoint.stdout != 'TIMEOUT' and backend_endpoint.stdout != '' else 'localhost' }}"

- name: Create frontend deployment file
  template:
    src: cloudmart-frontend.yaml.j2
    dest: "{{ frontend_dir }}/cloudmart-frontend.yaml"
  vars:
    frontend_app_name: "cloudmart-frontend-app"
    backend_api_url: "http://{{ backend_url }}:5000/api"
    frontend_image: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com/cloudmart-frontend"
    frontend_version: "latest"
    frontend_service_type: "LoadBalancer"
    k8s_namespace: "default"

- name: Deploy frontend to Kubernetes
  shell: kubectl apply -f {{ frontend_dir }}/cloudmart-frontend.yaml
  register: frontend_deploy

- name: Wait for frontend deployment
  shell: kubectl rollout status deployment/cloudmart-frontend-app --timeout=300s
  retries: 1
  delay: 10
  register: frontend_rollout
  failed_when: false

- name: Debug frontend deployment if failed
  block:
    - name: Get pod status
      shell: kubectl get pods -l app=cloudmart-frontend-app -o wide
      register: pod_status

    - name: Get pod logs
      shell: kubectl logs -l app=cloudmart-frontend-app --tail=50
      register: pod_logs
      failed_when: false

    - name: Get deployment description
      shell: kubectl describe deployment cloudmart-frontend-app
      register: deployment_desc

    - name: Display debugging info
      debug:
        msg: |
          Frontend deployment failed. Debug info:
          
          Pod Status:
          {{ pod_status.stdout }}
          
          Pod Logs:
          {{ pod_logs.stdout }}
          
          Deployment Description:
          {{ deployment_desc.stdout }}

    - name: Fail with clear message
      fail:
        msg: "Frontend deployment failed. Check the debug output above for details."
  when: frontend_rollout.rc != 0

- name: Get frontend service URL
  shell: |
    for i in {1..10}; do
      URL=$(kubectl get svc cloudmart-frontend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
      if [ -n "$URL" ]; then
        echo "$URL"
        exit 0
      fi
      echo "Waiting for frontend service... attempt $i/10"
      sleep 30
    done
    echo "Check 'kubectl get svc' for service status"
  register: frontend_endpoint
  changed_when: false
  failed_when: false

- name: Display deployment results
  debug:
    msg: |
      Deployment completed!
      Backend URL: http://{{ backend_url }}:5000/api
      Frontend URL: http://{{ frontend_endpoint.stdout }}:5001 (if LoadBalancer ready)
      
      Manual check commands:
      - kubectl get pods
      - kubectl get svc
      - kubectl get deployments
