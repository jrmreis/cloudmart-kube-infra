---
# Updated tasks for the k8s_deployment role

- name: Get AWS account ID
  shell: aws sts get-caller-identity --query 'Account' --output text
  register: aws_account_id_output

- name: Set AWS account ID fact
  set_fact:
    aws_account_id: "{{ aws_account_id_output.stdout }}"

- name: Create backend Kubernetes deployment file
  template:
    src: cloudmart-backend.yaml.j2
    dest: "{{ backend_dir }}/cloudmart-backend.yaml"
  vars:
    aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-east-1', true) }}"

- name: Apply backend Kubernetes deployment
  shell: |
    kubectl apply -f {{ backend_dir }}/cloudmart-backend.yaml
  register: backend_deployment_result

- name: Display backend deployment result
  debug:
    var: backend_deployment_result.stdout_lines
  when: backend_deployment_result is succeeded

- name: Wait for backend deployment to be available
  shell: |
    kubectl rollout status deployment/cloudmart-backend-app --timeout=120s
  register: backend_status
  retries: 3
  delay: 10
  until: backend_status.rc == 0
  ignore_errors: yes

- name: Wait for backend service to get external IP
  shell: |
    kubectl get svc cloudmart-backend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
  register: backend_url
  until: backend_url.stdout != ""
  retries: 15
  delay: 20
  ignore_errors: yes

- name: Get backend service URL
  shell: |
    kubectl get svc cloudmart-backend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
  register: backend_url_final
  when: backend_url is succeeded
  ignore_errors: yes

- name: Get backend service URL
  command: kubectl get svc cloudmart-backend-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
  register: backend_service_result
  
- name: Set actual backend URL if load balancer ready
  set_fact:
    backend_url: "http://{{ backend_service_result.stdout }}"
  when: backend_service_result.stdout != ""

- name: Create frontend .env file with backend endpoint
  template:
    src: frontend-env.j2
    dest: "{{ frontend_dir }}/.env"
  when: backend_url is defined
  vars:
    backend_url: "{{ backend_endpoint }}"

- name: Create frontend Kubernetes deployment file
  template:
    src: cloudmart-frontend.yaml.j2
    dest: "{{ frontend_dir }}/cloudmart-frontend.yaml"
  vars:
    aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-east-1', true) }}"

- name: Apply frontend Kubernetes deployment
  shell: |
    kubectl apply -f {{ frontend_dir }}/cloudmart-frontend.yaml
  register: frontend_deployment_result

- name: Create frontend ConfigMap from env file
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: frontend-env-config
        namespace: "{{ k8s_namespace | default('default') }}"
      data:
        .env: "{{ lookup('file', '/home/ec2-user/challenge-day2/frontend/') }}"

- name: Display frontend deployment result
  debug:
    var: frontend_deployment_result.stdout_lines
  when: frontend_deployment_result is succeeded
